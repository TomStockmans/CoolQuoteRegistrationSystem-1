group 'be.swsb'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'

sourceCompatibility = 1.8
targetCompatibility = 1.8


buildscript {
    repositories {
        mavenCentral()
        jcenter()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
    }

    dependencies {
        def springBootVersion = "1.4.1.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    def springBootVersion = "1.4.1.RELEASE"
    compile( 'org.springframework.boot:spring-boot-starter-data-jpa')
    compile( 'org.xerial:sqlite-jdbc')
    compile( group: 'com.zsoltfabok', name: 'sqlite-dialect', version: '1.0')

    compile("org.springframework.boot:spring-boot-starter-jersey:$springBootVersion") //jax-rs instead of spring-mvc
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion") //so we can serve static content from src/main/resources/static/

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.3") //to be able to deserialize LocalDateTimes etc.

    testCompile("junit:junit:4.12")
    testCompile("org.assertj:assertj-core:3.2.0")
    testCompile("org.mockito:mockito-core:2.0.31-beta")
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile("org.glassfish.jersey.core:jersey-client:2.23.2")
    testCompile("org.glassfish.jersey.ext:jersey-proxy-client:2.23.2")

}

npmInstall {
    workingDir = file('./src/ui')
    outputs.upToDateWhen {false}
}

task setupAurelia(type: NpmTask) {
    workingDir = file('./src/ui')
    args = ['run', 'setup']
}

task buildDist(type: NpmTask) {
    workingDir = file('./src/ui')
    args = ['run', 'dist']
}

task stageUI(type: Copy) {
    from 'src/ui/'
    include 'scripts/vendor-bundle.js',
            'scripts/app-bundle.js',
            'locales/**/*.json',
            'index.html',
            'favicon.ico'
    into 'src/main/resources/static'
}

test {
    systemProperty "spring.profiles.active", project.findProperty("springProfile")
}

// will be used by default by Heroku Gradle plugin
//task stage(dependsOn: ['build', 'clean'])
//build.mustRunAfter clean